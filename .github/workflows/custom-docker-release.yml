name: Build Multi-Platform Docker Image

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Auto Update Version and Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  build:
    name: Build Docker image
    if: |
      github.event_name != 'workflow_run' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version parts
        id: semver
        env:
          DISPATCH_TAG: ${{ github.event.inputs.tag }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          REF: ${{ github.ref }}
        run: |
          if [ -n "$DISPATCH_TAG" ]; then
            RAW_TAG="$DISPATCH_TAG"
            echo "Using tag from workflow_dispatch input: $RAW_TAG"
          elif [ -n "$RELEASE_TAG" ]; then
            RAW_TAG="$RELEASE_TAG"
            echo "Using tag from release event: $RAW_TAG"
          else
            RAW_TAG="${REF#refs/tags/}"
            echo "Using fallback from GITHUB_REF: $RAW_TAG"
          fi
          if [[ ! "$RAW_TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Error: Invalid tag format. Expected vX.Y.Z or X.Y.Z, got $RAW_TAG"
            exit 1
          fi
          VERSION="${RAW_TAG#v}"
          SHORT_VERSION=$(echo "$VERSION" | cut -d. -f1-3)
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
          echo "short=$SHORT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shall0pass/actualtap
          tags: |
            type=raw,value=${{ steps.semver.outputs.tag }}
            type=raw,value=${{ steps.semver.outputs.short }}
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}